///
/// @name adjust-to-baseline
/// @description A line-height ratio that matches the baseline rhythm
///
/// @param   {Number}  $height            - the height of the object
/// @param   {Boolean} $use-half-lines    - whether or not to round off to the nearest half line
/// @param   {Number}  $base-line         - the base-line height to set the object to
/// @returns {Number}  $line-height-ratio - the line-height-ratio
///
/// @example http://sassmeister.com/gist/fd9683f018c8a63b8079
///
@function adjust-to-baseline($height, $use-half-lines: $round-to-nearest-half-line, $base-line: $base-line-height) {

  // Error checking
  @if type-of($height) != 'number' {
    @warn "Type Error: Expected a $height of type 'number', provided #{type-of($height)} #{$height}";
    @return false;
  }

  @if unitless($height) {
    @warn "Unit Error: Unit of $height - (#{unit($height)}) was incorrect, expected 'unitless'";
    @return false;
  }

  @if type-of($base-line) != 'number' {
    @warn "Type Error: Expected a $base-line of type 'number', provided #{type-of($base-line)} #{$base-line}";
    @return false;
  }

  @if unit($base-line) != 'px' {
    @warn "Unit Error: Unit of $base-line - (#{unit($base-line)}) was incorrect, expected 'px'";
    @return false;
  }

  // Logic

  @if unit($height) == 'rem' {
    @if not function-exists(rem-to-px) {
      @warn 'Reference Error: Requirement; rem-to-px() not found';
      @return false;
    }

    $height: rem-to-px($height);
  }

  $threshold: .1;
  $line-height-ratio: if($use-half-lines, ceil(2 * $height / $base-line) / 2, ceil($height / $base-line));

  // Check to make sure there is room
  @if ($line-height-ratio * $base-line - $height) < ($base-line * $threshold) {
    $line-height-ratio: $line-height-ratio + if($use-half-lines, .5, 1);
  }


  @return $line-height-ratio;
}
